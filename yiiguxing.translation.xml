<application>
  <component name="AppStorage">
    <histories>
      <item value="查重通过标记" />
      <item value="是否查重通过标记" />
      <item value="repeat Check Pass Flag" />
      <item value="查重通过" />
      <item value="repeat Pass Flag" />
      <item value="is Repeat" />
      <item value="是否重复" />
      <item value="相似度" />
      <item value="repair Sim Hash" />
      <item value="predicate" />
      <item value="Post onboarding request, to setup initial user, org and bucket. @param url the url to connect to the InfluxDB @param username the name of an user @param password the password to connect as an user @param org the name of an organization @param bucket the name of a bucket @return Created default user, bucket, org." />
      <item value="Write Precision" />
      <item value="bucket" />
      <item value="specifies the destination organization for writes" />
      <item value="Creates a new instance of the class represented by this {@code Class} object. The class is instantiated as if by a {@code new} expression with an empty argument list. The class is initialized if it has not already been initialized. @deprecated This method propagates any exception thrown by the nullary constructor, including a checked exception. Use of this method effectively bypasses the compile-time exception checking that would otherwise be performed by the compiler. The {@link java.lang.reflect.ConstructornewInstance(java.lang.Object...) Constructor.newInstance} method avoids this problem by wrapping any exception thrown by the constructor in a (checked) {@link java.lang.reflect.InvocationTargetException}. &lt;p&gt;The call &lt;pre&gt;{@code clazz.newInstance() }&lt;pre&gt; can be replaced by &lt;pre&gt;{@code clazz.getDeclaredConstructor().newInstance() }&lt;pre&gt; The latter sequence of calls is inferred to be able to throw the additional exception types {@link InvocationTargetException} and {@link NoSuchMethodException}. Both of these exception types are subclasses of {@link ReflectiveOperationException}. @return a newly allocated instance of the class represented by this object. @throws IllegalAccessException if the class or its nullary constructor is not accessible. @throws InstantiationException if this {@code Class} represents an abstract class, an interface, an array class, a primitive type, or void; or if the class has no nullary constructor; or if the instantiation fails for some other reason. @throws ExceptionInInitializerError if the initialization provoked by this method fails. @throws SecurityException If a security manager, &lt;i&gt;s&lt;i&gt;, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of {@link SecurityManagercheckPackageAccess s.checkPackageAccess()} denies access to the package of this class." />
      <item value="Temporal" />
      <item value="Could not resolve type id 'null' as a subtype of `com.yun.education.resource.domain.model.question.choice.ChoiceQuestion`" />
      <item value="find Latest Task" />
      <item value="memo" />
      <item value="当前组的任一节点" />
      <item value="timer Enable" />
      <item value="time Enable" />
      <item value="Returns whether any elements of this stream match the provided predicate. May not evaluate the predicate on all elements if not necessary for determining the result. If the stream is empty then {@code false} is returned and the predicate is not evaluated. &lt;p&gt;This is a &lt;a href=&quot;package-summary.htmlStreamOps&quot;&gt;short-circuiting terminal operation&lt;a&gt;. @apiNote This method evaluates the &lt;em&gt;existential quantification&lt;em&gt; of the predicate over the elements of the stream (for some x P(x)). @param predicate a &lt;a href=&quot;package-summary.htmlNonInterference&quot;&gt;non-interfering&lt;a&gt;, &lt;a href=&quot;package-summary.htmlStatelessness&quot;&gt;stateless&lt;a&gt; predicate to apply to elements of this stream @return {@code true} if any elements of the stream match the provided predicate, otherwise {@code false}" />
      <item value="any Match" />
      <item value="重置" />
      <item value="reset" />
      <item value="检测链接" />
      <item value="enforce" />
      <item value="是否强制执行" />
      <item value="强制执行" />
      <item value="on Completion" />
      <item value="Raw use of parameterized class 'ISyncNode'" />
      <item value="Data Synced Push Text" />
      <item value="validate Blank Params" />
      <item value="Rejected" />
      <item value="Required type: ExceptionSupplier &lt;T&gt; Provided: SyncNodeDto reason: no instance(s) of type variable(s) T exist so that SyncNodeDto conforms to ExceptionSupplier&lt;T&gt;" />
      <item value="翻几倍" />
      <item value="翻倍" />
      <item value="倍率" />
      <item value="间隔倍率" />
      <item value="emitter" />
      <item value="heartbeat" />
      <item value="知识竞赛" />
      <item value="Sse Emitter" />
      <item value="get Sse Emitter" />
      <item value="匹配节点" />
      <item value="Accepts a function that extracts an {@code int} sort key from a type {@code T}, and returns a {@code Comparator&lt;T&gt;} that compares by that sort key. &lt;p&gt;The returned comparator is serializable if the specified function is also serializable. @param &lt;T&gt; the type of element to be compared @param keyExtractor the function used to extract the integer sort key @return a comparator that compares by an extracted key @see comparing(Function) @throws NullPointerException if the argument is null @since 1.8" />
      <item value="salver" />
      <item value="register Sync Node" />
      <item value="regist" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="161" />
        <entry key="ENGLISH" value="162" />
        <entry key="DANISH" value="1" />
        <entry key="GERMAN" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="JAPANESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1622451633805" />
  </component>
</application>