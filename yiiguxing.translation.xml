<application>
  <component name="AppStorage">
    <histories>
      <item value="当前组的任一节点" />
      <item value="timer Enable" />
      <item value="time Enable" />
      <item value="Returns whether any elements of this stream match the provided predicate. May not evaluate the predicate on all elements if not necessary for determining the result. If the stream is empty then {@code false} is returned and the predicate is not evaluated. &lt;p&gt;This is a &lt;a href=&quot;package-summary.htmlStreamOps&quot;&gt;short-circuiting terminal operation&lt;a&gt;. @apiNote This method evaluates the &lt;em&gt;existential quantification&lt;em&gt; of the predicate over the elements of the stream (for some x P(x)). @param predicate a &lt;a href=&quot;package-summary.htmlNonInterference&quot;&gt;non-interfering&lt;a&gt;, &lt;a href=&quot;package-summary.htmlStatelessness&quot;&gt;stateless&lt;a&gt; predicate to apply to elements of this stream @return {@code true} if any elements of the stream match the provided predicate, otherwise {@code false}" />
      <item value="any Match" />
      <item value="重置" />
      <item value="reset" />
      <item value="检测链接" />
      <item value="enforce" />
      <item value="是否强制执行" />
      <item value="强制执行" />
      <item value="on Completion" />
      <item value="Raw use of parameterized class 'ISyncNode'" />
      <item value="Data Synced Push Text" />
      <item value="validate Blank Params" />
      <item value="Rejected" />
      <item value="Required type: ExceptionSupplier &lt;T&gt; Provided: SyncNodeDto reason: no instance(s) of type variable(s) T exist so that SyncNodeDto conforms to ExceptionSupplier&lt;T&gt;" />
      <item value="翻几倍" />
      <item value="翻倍" />
      <item value="倍率" />
      <item value="间隔倍率" />
      <item value="emitter" />
      <item value="heartbeat" />
      <item value="知识竞赛" />
      <item value="Sse Emitter" />
      <item value="get Sse Emitter" />
      <item value="匹配节点" />
      <item value="Accepts a function that extracts an {@code int} sort key from a type {@code T}, and returns a {@code Comparator&lt;T&gt;} that compares by that sort key. &lt;p&gt;The returned comparator is serializable if the specified function is also serializable. @param &lt;T&gt; the type of element to be compared @param keyExtractor the function used to extract the integer sort key @return a comparator that compares by an extracted key @see comparing(Function) @throws NullPointerException if the argument is null @since 1.8" />
      <item value="salver" />
      <item value="register Sync Node" />
      <item value="regist" />
      <item value="指定" />
      <item value="特定" />
      <item value="备份" />
      <item value="备" />
      <item value="主从" />
      <item value="No transactional EntityManager available" />
      <item value="Service" />
      <item value="Private field 'value' is assigned but never accessed" />
      <item value="subject" />
      <item value="匹配" />
      <item value="Data Synced Dto" />
      <item value="Sync Push Request" />
      <item value="标识" />
      <item value="顺序" />
      <item value="payload" />
      <item value="User Hbm" />
      <item value="without" />
      <item value="constants" />
      <item value="A different object with the same identifier value was already associated with the session" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="161" />
        <entry key="ENGLISH" value="162" />
        <entry key="DANISH" value="1" />
        <entry key="GERMAN" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="JAPANESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1620357174790" />
  </component>
</application>